name: Deploy to AWS ECS

on:
  push:
    branches: ['master', 'main']

env:
  AWS_REGION: eu-west-1
  ECS_CLUSTER: ecc_project_cluster
  CONTAINER_NAME_APP: django
  ECS_SERVICE: ecc_project_service
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY_APP: ecc_project_django
  IMAGE_TAG: latest

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag Django image using Docker Compose
        id: build-image
        run: |
          docker compose -f docker-compose.local.yml build django
          docker tag ecc_project_local_django:latest $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG

      - name: Push app image to AWS ECR
        run: |
          # Push the Django app image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG

      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ecc_project_task_definition \
            --query 'taskDefinition' > task-definition.json

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME_APP }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_APP }}:${{ env.IMAGE_TAG }}

      - name: Deploy updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
