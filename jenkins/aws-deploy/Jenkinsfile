pipeline {
    agent any

    environment {
        CONTAINER_NAME_APP = 'django'
        CONTAINER_NAME_DB = 'postgres'
        ECS_CLUSTER = 'ecc-project-cluster'
        ECS_SERVICE = 'ecc-project-service'
        ECR_REPOSITORY_APP = 'ecc-project-django'
        ECR_REPOSITORY_DB = 'ecc-project-postgres'
        ECR_REGISTRY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com"
        IMAGE_TAG = 'latest'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Configure AWS') {
            steps {
                script {
                    // Configure AWS credentials
                    withAWS(credentials: 'aws-credentials', region: "${params.AWS_REGION}") {
                        // Login to ECR
                        sh """
                            aws ecr get-login-password --region ${params.AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        """
                    }
                }
            }
        }

        stage('Build and Push Django Image') {
            steps {
                script {
                    // Build Django image
                    sh """
                        docker compose -f docker-compose.local.yml build django
                        docker tag ecc_project_local_django:latest ${ECR_REGISTRY}/${ECR_REPOSITORY_APP}:${IMAGE_TAG}
                    """

                    // Push Django image
                    sh """
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY_APP}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Build and Push Postgres Image') {
            steps {
                script {
                    // Build Postgres image
                    sh """
                        docker compose -f docker-compose.local.yml build postgres
                        docker tag ecc_project_production_postgres:latest ${ECR_REGISTRY}/${ECR_REPOSITORY_DB}:${IMAGE_TAG}
                    """

                    // Push Postgres image
                    sh """
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY_DB}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Update ECS Task Definition') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: "${params.AWS_REGION}") {
                        // Download current task definition
                        sh """
                            aws ecs describe-task-definition \
                            --task-definition ecc-project-task-definition \
                            --query 'taskDefinition' > task-definition.json
                        """

                        // Read and modify task definition
                        def taskDef = readJSON file: 'task-definition.json'
                        taskDef.containerDefinitions.each { container ->
                            if (container.name == CONTAINER_NAME_APP) {
                                container.image = "${ECR_REGISTRY}/${ECR_REPOSITORY_APP}:${IMAGE_TAG}"
                            }
                        }
                        writeJSON file: 'new-task-definition.json', json: taskDef

                        // Register new task definition
                        def newTaskDefArn = sh(
                            script: "aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text",
                            returnStdout: true
                        ).trim()

                        // Update ECS service with new task definition
                        sh """
                            aws ecs update-service \
                            --cluster ${ECS_CLUSTER} \
                            --service ${ECS_SERVICE} \
                            --task-definition ${newTaskDefArn} \
                            --force-new-deployment
                        """

                        // Wait for service stability
                        sh """
                            aws ecs wait services-stable \
                            --cluster ${ECS_CLUSTER} \
                            --services ${ECS_SERVICE}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images
            sh """
                docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY_APP}:${IMAGE_TAG} || true
                docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY_DB}:${IMAGE_TAG} || true
                docker system prune -f
            """
            cleanWs()
        }
    }
}
