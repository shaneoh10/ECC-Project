pipeline {
    agent any
    environment {
        DOCKER_BUILDKIT = '1'
        COMPOSE_DOCKER_CLI_BUILD = '1'
        PRE_COMMIT_HOME = '/tmp/.pre-commit-cache'
    }
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Linting and Build/Test in Parallel') {
            parallel {
                stage('Linting') {
                    agent {
                        docker {
                            image 'python:3.12'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                        # Install pre-commit
                        pip install pre-commit

                        # Run your pre-commit commands here
                        pre-commit run --all-files
                        '''
                        cleanWs patterns: [
                            [pattern: '.pre-commit-cache/**', type: 'INCLUDE']
                        ]
                    }
                }
                stage('Build and Test') {
                    steps {
                        script {
                            withEnv([
                                "POSTGRES_DB=${params.POSTGRES_DB}",
                                "POSTGRES_USER=${params.POSTGRES_USER}",
                                "POSTGRES_PASSWORD=${params.POSTGRES_PASSWORD}",
                                "POSTGRES_HOST=${params.POSTGRES_HOST}"
                            ]) {
                                sh 'docker compose -f docker-compose.local.yml build django'
                                sh 'docker compose -f docker-compose.docs.yml build docs'
                                sh 'docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations --check'
                                sh 'docker compose -f docker-compose.local.yml run --rm django python manage.py migrate'
                                sh 'docker compose -f docker-compose.local.yml run django pytest'
                            }
                        }
                    }
                    post {
                        always {
                            sh 'docker compose -f docker-compose.local.yml down'
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    # Remove unused Docker images, containers, and volumes
                    docker system prune -f --all --volumes
                '''
                // Clean up the workspace
                cleanWs patterns: [
                    [pattern: '**/*', type: 'INCLUDE']
                ]
            }
        }
    }
}
