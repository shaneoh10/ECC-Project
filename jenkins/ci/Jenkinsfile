pipeline {
    agent any
    environment {
        DOCKER_BUILDKIT = '1'
        COMPOSE_DOCKER_CLI_BUILD = '1'
        PRE_COMMIT_HOME = '/tmp/.pre-commit-cache'
    }
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Run Linting and Build/Test in Parallel') {
            parallel {
                stage('Linting') {
                    steps {
                        sh '''#!/bin/bash
                            # Exit on error
                            set -e
                            # Print commands for debugging
                            set -x

                            # Ensure we're in the workspace
                            cd ${WORKSPACE}

                            # Create virtual environment
                            python -m venv .venv
                            source .venv/bin/activate

                            # Upgrade pip
                            pip install --upgrade pip

                            # Install pre-commit
                            pip install pre-commit

                            # Initialize pre-commit if .pre-commit-config.yaml exists
                            if [ -f .pre-commit-config.yaml ]; then
                                pre-commit install
                                pre-commit run --all-files
                            else
                                echo "Warning: .pre-commit-config.yaml not found"
                                exit 1
                            fi
                        '''
                        // Clean up afterwards
                        cleanWs patterns: [
                            [pattern: '.venv/**', type: 'INCLUDE'],
                            [pattern: '.pre-commit-cache/**', type: 'INCLUDE']
                        ]
                    }
                }
                stage('Build and Test') {
                    steps {
                        script {
                            withEnv([
                                "POSTGRES_DB=${params.POSTGRES_DB}",
                                "POSTGRES_USER=${params.POSTGRES_USER}",
                                "POSTGRES_PASSWORD=${params.POSTGRES_PASSWORD}",
                                "POSTGRES_HOST=${params.POSTGRES_HOST}"
                            ]) {
                                sh 'docker compose -f docker-compose.local.yml build django'
                                sh 'docker compose -f docker-compose.docs.yml build docs'
                                sh 'docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations --check'
                                sh 'docker compose -f docker-compose.local.yml run --rm django python manage.py migrate'
                                sh 'docker compose -f docker-compose.local.yml run django pytest'
                            }
                        }
                    }
                    post {
                        always {
                            sh 'docker compose -f docker-compose.local.yml down'
                        }
                    }
                }
                stage('Terraform Check') {
                    steps {
                        dir('terraform') {
                            sh 'terraform fmt -check'
                            sh 'terraform init'
                            withEnv([
                                "AWS_ACCESS_KEY_ID=${params.AWS_ACCESS_KEY_ID}",
                                "AWS_SECRET_ACCESS_KEY=${params.AWS_SECRET_ACCESS_KEY}",
                                "AWS_DEFAULT_REGION=${params.AWS_REGION}",
                                "TF_VAR_postgres_db=${params.POSTGRES_DB}",
                                "TF_VAR_postgres_user=${params.POSTGRES_USER}",
                                "TF_VAR_postgres_password=${params.POSTGRES_PASSWORD}",
                                "TF_VAR_postgres_host=${params.POSTGRES_HOST}"
                            ]) {
                                sh 'terraform plan -no-color -out=terraform.tfplan'
                            }
                            sh '''
                                if [ ! -f terraform.tfplan ]; then
                                    echo "Plan file not created, failing the job."
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            sh '''
                # Remove unused Docker images, containers, and volumes
                docker system prune -f --all --volumes
            '''
        }
    }
}
